---
title: "Data upload"
number-sections: true
---

The information on this page is primarily aimed at **drone pilots** wishing to add mission data to the SeaBee platform. For a more general overview of SeaBee data storage, see [here](./storage.qmd).

## Overview {#sec-overview}

There are two main use cases for pilots adding data to the SeaBee platform:

 1. **Upload raw images and associated files** (ground control points etc.) and then perform all subsequent processing - such as orthomosaicing - on the platform itself.

 2. **Upload partially processed data**. For example by performing some of the initial steps on a local desktop machine first.

**Option 1 should be preferred where possible** as it ensures a consistent and traceable processing pipeline for the entire workflow, and in most cases it should be faster and easier from a pilot's perspective too. The main reason for choosing Option 2 is if pilots want to use commercial software (such as Pix4D) instead of Open Drone Map (ODM) for orthorectification. In this case, pilots must have a separate Pix4D licence to create the orthophoto(s), then upload the finished mosaics together with supporting metadata.

The easiest way to upload data for a **single mission** is to use the [data upload interface](https://geonode.seabee.sigma2.no/ddc/#step-1). This will guide you through the process of adding mission data and metadata, regardless of whether you want to upload raw files or partially processed data.

::: {.callout-important}
The data upload interface assumes the mission has already been registered in SeaBee's [Dronelogbook](https://www.dronelogbook.com/hp/1/index.html) during the mission planning stage. **If the mission is not registered in Dronelogbook, you will not be able to use the upload interface** (see below for alternatives). 
:::

If you wish to upload data from **multiple missions**, or if your mission is not registered in Dronelogbook, you will need to organise the data into folders yourself and then upload it to the platform using the method of your choice (see below for details).

## Data structure {#sec-data-structure}

### Flight folder naming {#sec-flight-folder}

The data from each flight should be gathered into a **single folder** named `grouping_area_yyyymmddHHMM`. Note the use of **underscores** (`_`) to separate each of the components. Hyphens (`-`) or `CamelCase` can be used to further divide each component, if necessary. For example: `multipart-group_area-part-1_yyyymmddHHMM` or `MultipartGroup_AreaPart1_yyyymmddHHMM`.

::: {.callout-important}
**The folder name must be unique**. If you really have two flights in the same group and area that took off at *exactly* the same time, consider using e.g. `group_area-flight1_yyyymmddHHMM` and `group_area-flight2_yyyymmddHHMM`, or simply adjust one of the start times by a small amount.
:::

The three components of the folder name have the following meanings:

 * `grouping` is any general identifier linking data from this flight with data from other related flights. For example: the name of a broad region where several flights have taken place (e.g. `Runde`); the name of a project (e.g. `Kelpmap`); or the name of a fieldwork team (e.g. `Team1`, or `Team1Day1`).

 * `area` is the name of the location (e.g. the name of an island, or a specific stretch of coastline).

 * `yyyymmddHHMM` is the flight start date and time. The date part (`yyyymmdd`) is mandatory, whereas the time (`HHMM`) is optional, but recommended. Including the time is often necessary to uniquely distinguish multiple flights taking place in the same group and area on the same day. Note that there are no separators or additional characters in the datetime (i.e. use `yyyymmddHHMM`, **not** `yyyy-mm-dd-HH:MM` or any other variant).

::: {.callout-note}
The flight folders themselves can be organised however you wish. For example, you may choose to group flight folders into parent folders based on organisation and year (e.g. `/niva/2023/flight_folder1`, `/niva/2023/flight_folder2` etc.), or you may wish to group them by project, pilot, or any combination of these. As long as the data *within* each flight folder is arranged correctly, everything should work OK (see @sec-subfolder-structure). 
:::

### Subfolder structure {#sec-subfolder-structure}

Within the "parent" flight folder, data should be organised into subfolders as follows:

```
grouping_area_yyyymmddHHMM/
├─ annotation/
├─ dem/
├─ gcp/
│  ├─ gcp_list-ODM.txt
│  ├─ gcp_list-Pix4D.txt
├─ ground-truth/
├─ images/
├─ orthophoto/
├─ other/
├─ report/
│  ├─ report.pdf
│  ├─ stdout.txt
├─ texturing/
config.yaml
```

::: {.callout-note}
It is **not** necessary to include all the folders - just include what you need. As a minimum, the flight folder *must* contain a subfolder named `images` with the raw images and a file named `config.yaml`. **All other components are optional**. The most basic flight folder is therefore:

```
grouping_area_yyyymmddHHMM/
├─ images/
config.yaml
```
:::

The purpose of each subfolder or file is as follows:

 * `annotation` (optional). Contains any relevant user-generated annotation not already on the SeaBee platform (e.g. externally generated geopackages).

 * `dem` (optional). Contains elevation datasets generated during orthorectification (DSMs and DTMs etc.). This folder and its contents will be generated automatically if orthorectification is performed on the platform using ODM, but it should be explicitly provided if orthorectification has been done elsewhere (e.g. using Pix4D).

 * `gcp` (optional). Folder containing ground control points in a standard text format. The format used by ODM is different to that used by Pix4D, so **please specify which format has been used in the filename**, as shown above.
 
 * `ground_truth` (optional). Ground truth data, if available.

 * `orthophoto` (optional). Georeferenced mosaic images. Ideally a single, multi-band GeoTiff. This folder and its contents will be generated automatically if orthorectification is performed on the platform using ODM, but it should be explicitly provided if orthorectification has been done elsewhere (e.g. using Pix4D). ODM generates orthophotos named `odm_orthophoto.original.tif`. **If you are uploading an externally built mosaic from Pix4D, it should be placed in this folder and named `pix4d_orthophoto.original.tif`**.

 * `other` (optional). Anything not included in the other folders.

 * `report` (optional). The PDF report describing results from the orthorectification process, plus any associated logs (e.g. text files and JSON). This folder and its contents will be generated automatically if orthorectification is performed on the platform using ODM, but it should be explicitly provided if orthorectification has been done elsewhere (e.g. using Pix4D).

 * `texturing` (optional). Texture models generated during orthorectification. This folder and its contents will be generated automatically if orthorectification is performed on the platform using ODM, but it should be explicitly provided if orthorectification has been done elsewhere (e.g. using Pix4D).

 * `images` (required). Images from a **single flight** (i.e. images that can be orthorectified to produce a single mosaic). 

 * `config.yaml` (required). A file containing flight metadata and additional settings to control the processing workflow. See @sec-config-file for details.

### Configuration file {#sec-config-file}

Each flight folder must contain a file named `config.yaml`, which contains additional flight metadata plus settings/commands to control the data processing. A minimal example with just the mandatory attributes is shown below.

``` yaml
nfiles: 135                           # Total number of files in the 'images' folder
organisation: NINA                    # Responsible organisation
creator_name: Sindre Molværsmyr       # Data collector/pilot
mosaic: true                          # Whether to mosaic the raw images using ODM (true or false)
publish: true                         # Whether to publish the orthophoto to GeoNode (true or false)
theme: Seabirds                       # SeaBee "theme" ('Seabirds', 'Mammals' or 'Habitat') 
```

The `nfiles` attribute is important, as it is used to determine whether the data upload has completed successfully before starting any further processing. For example, before attempting to mosaic any images using NodeODM, the processing script will first check that the number of files in the `images` subfolder matches the `nfiles` attribute in `config.yaml`. If it does, it is assumed that upload is complete and the flight is ready to be processed; if it does not, the flight is skipped and checked again later.

In addition, `config.yaml` may contain optional information to control subsequent processing and to add extra metadata. A complete list of attributes currently supported is shown below. Note that **optional attributes can simply be omitted from the file if they are not relevant** (like in the example above). For further explanation of `odm_options`, see the documentation [here](https://docs.opendronemap.org/arguments/). 

If `mosaic` is `true` and `odm_options` are omitted, the default options defined [here](https://github.com/SeaBee-no/seabeepy/blob/aba458bbc714434e0afaafe4646f9c21f2ba236c/seabeepy/ortho.py#L80) will be used instead.

``` yaml
nfiles: 135                           # Total number of files in the 'images' folder
organisation: NINA                    # Responsible organisation
creator_name: Sindre Molværsmyr       # Data collector/pilot
mosaic: true                          # Whether to mosaic the raw images using ODM (true or false)
publish: true                         # Whether to publish the orthophoto to GeoNode (true or false)
theme: Seabirds                       # SeaBee "theme" ('Seabirds', 'Mammals' or 'Habitat')
project: Seabirds2023                 # [Optional]. Name of project
odm_options:                          # [Optional]. Overrides default orthorectification settings
  dsm: true                           # [Optional]. true or false
  dtm: true                           # [Optional]. true or false
  cog: true                           # [Optional]. true or false
  orthophoto-compression: LZW         # [Optional]. JPEG, LZW, PACKBITS, DEFLATE, LZMA or NONE
  orthophoto-resolution: 0.1          # [Optional]. Float. cm/pixel
  dem-resolution: 0.1                 # [Optional]. Float. cm/pixel
  max-concurrency: 16                 # [Optional]. Int
  auto-boundary: true                 # [Optional]. true or false
  use-3dmesh: true                    # [Optional]. true or false
  fast-orthophoto: false              # [Optional]. true or false
  split: 999999                       # [Optional]. Int
  split-overlap: 150                  # [Optional]. Int
  pc-quality: high                    # [Optional]. ultra, high, medium, low, lowest
  feature-quality: high               # [Optional]. ultra, high, medium, low, lowest
```

::: {.callout-note}
The exact structure and content of `config.yaml` is not yet settled and will likely expand over time. See the issue [here](https://github.com/SeaBee-no/documentation/issues/32) for the latest details, or if you would like to suggest additional options.
:::

## Manual data upload {#sec-upload}

If you are not using the [data upload interface](https://geonode.seabee.sigma2.no/ddc/#step-1), the first step before uploading anything is to organise the data from each flight into folders on your local system, as described in @sec-data-structure. Once you have done this, there are two options for getting the data onto the SeaBee platform: the MinIO web interface and  Rclone, both of which are described on the [Storage](./storage.qmd) page.

The MinIO web interface is convenient if you only need to upload data for a single, small mission. For most other cases, Rclone is recommended. The big advantage of Rclone is that it tracks which files have been transferred and will retry if the network connection is interrupted. For transferring large volumes of high resolution imagery, it is therefore much more reliable than "standard" data upload via a web interface: using Rclone, it is possible to upload terabytes of data relatively smoothly.

::: {.callout-tip}
## Example: Using Rclone and ODM for near-real-time generation of orthophotos

During spring 2023, Sindre Molværsmyr and colleagues from NINA flew several hundred drone-based seabird surveys within a period of just a few weeks. Raw images were downloaded from the drones each evening and arranged into flight folders with the structure shown below (as described in @sec-data-structure):

```
grouping_area_yyyymmddHHMM/
├─ images/
config.yaml
```

These folders were synchronised to the SeaBee platform overnight using Rclone, which typically involved batch-uploading data from between 20 and 40 flights per day. Around 5 TB of data were uploaded during the first two weeks.

A script running every hour on the SeaBee platform compared the number of files in the `images` folders with values specified in `config.yaml` files to determine which flights were ready for processing. These datasets were then submitted as jobs to NodeODM, which ran continuously processing data from four missions in parallel. 

Completed orthomosaics were optimised for viewing online and then automatically published to the SeaBee GeoNode - usually within a few hours of the data upload completing. This made it possible for the survey team to check their data while still in the field, which is something we have never previously achieved at this scale.
:::